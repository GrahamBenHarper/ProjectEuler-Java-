// Problem 2:
// Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
// 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
// By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

import java.util.*;

public class Problem2
{
    public static void main(String[] args)
    {
        int range = 4000000;
        ArrayList<Integer> Fibonaccis = listFibonaccisLessThanMax(range);
        int sum = sumEvensInFibArray(Fibonaccis);
        
        System.out.println("The sum of all even fibonacci numbers less than or equal to "+range+" is "+sum);
    }
    
    
    public static ArrayList<Integer> listFibonaccisLessThanMax(int max)
    {
        ArrayList<Integer> x = new ArrayList<>();
        int i;
        
        x.add(0); // x[0] will be used to return the largest index
        x.add(1); // x[1] is where the sequence starts
        x.add(2);
        
        for(i=2; x.get(i)<=max;i++)
        {
            x.add(x.get(i-1) + x.get(i)); // Iterate on x until the max is broken on the ith iteration
        }
        
        x.set(0,i-1); // Tell the summation later not to exceed i-1
        
        return x;
    }
    
    public static int sumEvensInFibArray(ArrayList<Integer> Fib)
    {
        int max = Fib.get(0); // Find out how far to sum over Fib
        int sum = 0;          // Initialize the sum
        
        for(int i=Fib.indexOf(2); i<=max; i+=3) // Start at 2 since every Fibonacci sequence contains 2, regardless of starting 1,1,2,... or 1,2,3,...
        {
            sum+=Fib.get(i);  // Add every third Fibonacci to the sum (since the cycle starting at 2 is even, odd, odd, even, odd, odd, etc.)
        }
        return sum;
    }
}